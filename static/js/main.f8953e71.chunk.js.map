{"version":3,"sources":["document-title.tsx","nengo.ts","share-nengo-button.tsx","nengo-counter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DocumentTitle","_React$PureComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","title","inherits","createClass","key","value","window","document","React","PureComponent","Nengo","name","startedAt","Date","parse","from","elapsedSecs","getTime","Math","floor","nengos","toQueryString","params","keys","map","k","concat","encodeURIComponent","join","ShareNengoButton","react_default","a","createElement","className","href","data-size","NengoCounter","_ref","nengo","Fragment","elapsedYears","share_nengo_button_ShareNengoButton","text","App","document_title_DocumentTitle","i","nengo_counter_NengoCounter","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAMaA,EAAb,SAAAC,GAGE,SAAAD,EAAYE,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACxBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAHQQ,WAEU,EAExBP,EAAKO,MAAQR,EAAMQ,MAFKP,EAH5B,OAAAC,OAAAO,EAAA,EAAAP,CAAAJ,EAAAC,GAAAG,OAAAQ,EAAA,EAAAR,CAAAJ,EAAA,EAAAa,IAAA,oBAAAC,MAAA,WASIC,OAAOC,SAASN,MAAQJ,KAAKI,QATjC,CAAAG,IAAA,SAAAC,MAAA,WAaI,OAAO,SAbXd,EAAA,CAAmCiB,IAAMC,eCJ5BC,EAAb,WAGE,SAAAA,EAA4BC,EAAcC,GAAoBjB,OAAAC,EAAA,EAAAD,CAAAE,KAAAa,GAAAb,KAAAc,OAAAd,KAF9Ce,eAE6C,EAC3Df,KAAKe,UAAY,IAAIC,KAAKA,KAAKC,MAAMF,IAJzC,OAAAjB,OAAAQ,EAAA,EAAAR,CAAAe,EAAA,EAAAN,IAAA,eAAAC,MAAA,SAOsBU,GAClB,IAAMC,EAAcD,EAAKE,UAAY,IAAOpB,KAAKe,UAAUK,UAAY,IACvE,OAAOC,KAAKC,MAAMH,EAXC,aAEvBN,EAAA,GAmBaU,EAAS,CAND,IAAIV,EAAM,eAAM,cACf,IAAIA,EAAM,eAAM,cACjB,IAAIA,EAAM,eAAM,cACf,IAAIA,EAAM,eAAM,cACjB,IAAIA,EAAM,eAAM,eCjB/BW,EAAgB,SAACC,GAAD,OACpB3B,OAAO4B,KAAKD,GACTE,IAAI,SAAAC,GAAC,SAAAC,OAAOC,mBAAmBF,GAA1B,KAAAC,OAAgCC,mBAAmBL,EAAOG,OAC/DG,KAAK,MAEGC,EAGR,SAAAP,GAAM,OACTQ,EAAAC,EAAAC,cAAA,KACEC,UAAU,uBACVC,KAAI,oCAAAR,OAAsCL,EAAcC,IACxDa,YAAU,SAHZ,UCPWC,EAAwD,SAAAC,GAAA,IACnEtB,EADmEsB,EACnEtB,KACAuB,EAFmED,EAEnEC,MAFmE,OAInER,EAAAC,EAAAC,cAAAF,EAAAC,EAAAQ,SAAA,KACET,EAAAC,EAAAC,cAAA,gCACMM,EAAM3B,KACT2B,EAAME,aAAazB,GAFtB,qBAEgC,IAC9Be,EAAAC,EAAAC,cAACS,EAAD,CACEC,KAAI,qBAAAhB,OAAQY,EAAM3B,MAAde,OAAqBY,EAAME,aAAazB,GAAxC,2BCIG4B,EAZH,kBACVb,EAAAC,EAAAC,cAAAF,EAAAC,EAAAQ,SAAA,KACET,EAAAC,EAAAC,cAACY,EAAD,CAAe3C,MAAM,mCACrB6B,EAAAC,EAAAC,cAAA,yBACIF,EAAAC,EAAAC,cAAA,QAAM/B,MAAM,4BAAZ,gBADJ,UAGCmB,EAAOI,IAAI,SAACc,EAAOO,GAAR,OACVf,EAAAC,EAAAC,cAACc,EAAD,CAAcR,MAAOA,EAAOvB,KAAM,IAAIF,KAAQT,IAAKyC,cCArCE,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAAS9C,SAAS+C,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f8953e71.chunk.js","sourcesContent":["import React from \"react\"\n\ninterface Props {\n  title: string\n}\n\nexport class DocumentTitle extends React.PureComponent<Props> {\n  public readonly title: string\n\n  constructor(props: Props) {\n    super(props)\n    this.title = props.title\n  }\n\n  public componentDidMount() {\n    window.document.title = this.title\n  }\n\n  public render() {\n    return null\n  }\n}\n","const A_YEAR_SECONDS = 60 * 60 * 24 * 365\n\nexport class Nengo {\n  public readonly startedAt: Date\n\n  constructor(public readonly name: string, startedAt: string) {\n    this.startedAt = new Date(Date.parse(startedAt))\n  }\n\n  public elapsedYears(from: Date): number {\n    const elapsedSecs = from.getTime() / 1000 - this.startedAt.getTime() / 1000\n    return Math.floor(elapsedSecs / A_YEAR_SECONDS)\n  }\n}\n\nexport const MEIJI = new Nengo(\"明治\", \"1868-01-25\")\nexport const TAISHO = new Nengo(\"大正\", \"1912-07-30\")\nexport const SHOWA = new Nengo(\"昭和\", \"1926-12-25\")\nexport const HEISEI = new Nengo(\"平成\", \"1989-01-07\")\nexport const REIWA = new Nengo(\"令和\", \"2019-05-01\")\n\nexport const nengos = [MEIJI, TAISHO, SHOWA, HEISEI, REIWA]\n","import React from \"react\"\n\nconst toQueryString = (params: { [k: string]: any }): string =>\n  Object.keys(params)\n    .map(k => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`)\n    .join(\"&\")\n\nexport const ShareNengoButton: React.SFC<{\n  text?: string\n  url?: string\n}> = params => (\n  <a\n    className=\"twitter-share-button\"\n    href={`https://twitter.com/intent/tweet?${toQueryString(params)}`}\n    data-size=\"large\"\n  >\n    Tweet\n  </a>\n)\n","import React from \"react\"\nimport { Nengo } from \"./nengo\"\nimport { ShareNengoButton } from \"./share-nengo-button\"\n\nexport const NengoCounter: React.SFC<{ nengo: Nengo; from: Date }> = ({\n  from,\n  nengo,\n}) => (\n  <>\n    <div>\n      今日は{nengo.name}\n      {nengo.elapsedYears(from)}年です{\" \"}\n      <ShareNengoButton\n        text={`今日は${nengo.name}${nengo.elapsedYears(from)}年です`}\n      />\n    </div>\n  </>\n)\n","import React from \"react\"\nimport { DocumentTitle } from \"./document-title\"\nimport { nengos } from \"./nengo\"\nimport { NengoCounter } from \"./nengo-counter\"\n\nconst App = () => (\n  <>\n    <DocumentTitle title=\"年号早見表\" />\n    <h1>\n      年号<abbr title=\"早見沙織\">早見</abbr>表\n    </h1>\n    {nengos.map((nengo, i) => (\n      <NengoCounter nengo={nengo} from={new Date()} key={i} />\n    ))}\n  </>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./index.css\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}